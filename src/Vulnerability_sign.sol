// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

contract MultiSigWallet {
    using ECDSA for bytes32;

    address[2] public owners;

    constructor(address[2] memory _owners) payable {
        owners = _owners;
    }

    function deposit() external payable {}

    function transfer(address _toAddress, uint _Amount, bytes[2] memory _sigs) external {
        bytes32 txHash = getTxHash(_toAddress, _Amount);
        require(_checkSigs(_sigs, txHash), "invalid sig");

        (bool sent, ) = _toAddress.call{value: _Amount}("");
        require(sent, "Failed to send Ether");
    }

    function getTxHash(address _toAddress, uint _Amount) public view returns (bytes32) {
        return keccak256(abi.encodePacked(_toAddress, _Amount));
    }

    function _checkSigs(
        bytes[2] memory _sigs,
        bytes32 _txHash
    ) private view returns (bool) {
        bytes32 ethSignedHash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", _txHash));

        for (uint i = 0; i < _sigs.length; i++) {
            address signer = ethSignedHash.recover(_sigs[i]);
            bool valid = signer == owners[i];

            if (!valid) {
                return false;
            }
        }

        return true;
    }
}